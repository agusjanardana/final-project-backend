// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	records "vaccine-app-be/drivers/records"

	mock "github.com/stretchr/testify/mock"
)

// VaccineSessionRepository is an autogenerated mock type for the VaccineSessionRepository type
type VaccineSessionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, record
func (_m *VaccineSessionRepository) Create(ctx context.Context, record records.VaccineSession) (records.VaccineSession, error) {
	ret := _m.Called(ctx, record)

	var r0 records.VaccineSession
	if rf, ok := ret.Get(0).(func(context.Context, records.VaccineSession) records.VaccineSession); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Get(0).(records.VaccineSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, records.VaccineSession) error); ok {
		r1 = rf(ctx, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id, hfid
func (_m *VaccineSessionRepository) Delete(ctx context.Context, id int, hfid int) (records.VaccineSession, error) {
	ret := _m.Called(ctx, id, hfid)

	var r0 records.VaccineSession
	if rf, ok := ret.Get(0).(func(context.Context, int, int) records.VaccineSession); ok {
		r0 = rf(ctx, id, hfid)
	} else {
		r0 = ret.Get(0).(records.VaccineSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, id, hfid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *VaccineSessionRepository) FindById(ctx context.Context, id int) (records.VaccineSession, error) {
	ret := _m.Called(ctx, id)

	var r0 records.VaccineSession
	if rf, ok := ret.Get(0).(func(context.Context, int) records.VaccineSession); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(records.VaccineSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindSessionOwnedByHf provides a mock function with given fields: ctx, hfid
func (_m *VaccineSessionRepository) FindSessionOwnedByHf(ctx context.Context, hfid int) ([]records.VaccineSession, error) {
	ret := _m.Called(ctx, hfid)

	var r0 []records.VaccineSession
	if rf, ok := ret.Get(0).(func(context.Context, int) []records.VaccineSession); ok {
		r0 = rf(ctx, hfid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]records.VaccineSession)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, hfid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllVaccineSession provides a mock function with given fields: ctx
func (_m *VaccineSessionRepository) GetAllVaccineSession(ctx context.Context) ([]records.VaccineSession, error) {
	ret := _m.Called(ctx)

	var r0 []records.VaccineSession
	if rf, ok := ret.Get(0).(func(context.Context) []records.VaccineSession); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]records.VaccineSession)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, hfid, record
func (_m *VaccineSessionRepository) Update(ctx context.Context, id int, hfid int, record records.VaccineSession) (records.VaccineSession, error) {
	ret := _m.Called(ctx, id, hfid, record)

	var r0 records.VaccineSession
	if rf, ok := ret.Get(0).(func(context.Context, int, int, records.VaccineSession) records.VaccineSession); ok {
		r0 = rf(ctx, id, hfid, record)
	} else {
		r0 = ret.Get(0).(records.VaccineSession)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, records.VaccineSession) error); ok {
		r1 = rf(ctx, id, hfid, record)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
