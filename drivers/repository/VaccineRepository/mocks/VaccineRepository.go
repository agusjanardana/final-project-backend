// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	records "vaccine-app-be/drivers/records"

	mock "github.com/stretchr/testify/mock"
)

// VaccineRepository is an autogenerated mock type for the VaccineRepository type
type VaccineRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, vaccine
func (_m *VaccineRepository) Create(ctx context.Context, vaccine records.Vaccine) (records.Vaccine, error) {
	ret := _m.Called(ctx, vaccine)

	var r0 records.Vaccine
	if rf, ok := ret.Get(0).(func(context.Context, records.Vaccine) records.Vaccine); ok {
		r0 = rf(ctx, vaccine)
	} else {
		r0 = ret.Get(0).(records.Vaccine)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, records.Vaccine) error); ok {
		r1 = rf(ctx, vaccine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, hfid, vaccineId
func (_m *VaccineRepository) Delete(ctx context.Context, hfid int, vaccineId int) (records.Vaccine, error) {
	ret := _m.Called(ctx, hfid, vaccineId)

	var r0 records.Vaccine
	if rf, ok := ret.Get(0).(func(context.Context, int, int) records.Vaccine); ok {
		r0 = rf(ctx, hfid, vaccineId)
	} else {
		r0 = ret.Get(0).(records.Vaccine)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, hfid, vaccineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVaccineById provides a mock function with given fields: ctx, vaccineId
func (_m *VaccineRepository) FindVaccineById(ctx context.Context, vaccineId int) (records.Vaccine, error) {
	ret := _m.Called(ctx, vaccineId)

	var r0 records.Vaccine
	if rf, ok := ret.Get(0).(func(context.Context, int) records.Vaccine); ok {
		r0 = rf(ctx, vaccineId)
	} else {
		r0 = ret.Get(0).(records.Vaccine)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, vaccineId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVaccineOwnedByHF provides a mock function with given fields: ctx, hfid
func (_m *VaccineRepository) FindVaccineOwnedByHF(ctx context.Context, hfid int) ([]records.Vaccine, error) {
	ret := _m.Called(ctx, hfid)

	var r0 []records.Vaccine
	if rf, ok := ret.Get(0).(func(context.Context, int) []records.Vaccine); ok {
		r0 = rf(ctx, hfid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]records.Vaccine)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, hfid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, hfid, vaccineId, vaccine
func (_m *VaccineRepository) Update(ctx context.Context, hfid int, vaccineId int, vaccine records.Vaccine) (records.Vaccine, error) {
	ret := _m.Called(ctx, hfid, vaccineId, vaccine)

	var r0 records.Vaccine
	if rf, ok := ret.Get(0).(func(context.Context, int, int, records.Vaccine) records.Vaccine); ok {
		r0 = rf(ctx, hfid, vaccineId, vaccine)
	} else {
		r0 = ret.Get(0).(records.Vaccine)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int, records.Vaccine) error); ok {
		r1 = rf(ctx, hfid, vaccineId, vaccine)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
